'''
基于 IO多路复用 + 非阻塞的特性，无论编写socket的服务端和客户端都可以提升性能。
其中:
- IO多路复用，监测socket对象是否有变化（是否连接成功？是否有数据到来等）。
- 非阻塞，socket的connect、recv过程不再等待。

注意：IO多路复用只能用来监听 IO对象 是否发生变化，常见的有：文件是否可读写、电脑终端设备输入和输出、网络请求（常见）。

在Linux操作系统化中 IO多路复用 有三种模式，分别是：select，poll，epoll。（windows 只支持select模式）

select和poll差别不大，只是pool没有最大文件描符数量的限制，但是都存在内存开销随着描述符数量的增大而线性增加。
epool具备之前的一切优点，重要的是，不再依靠遍历来进行对象变化的判断，而是“触发”，可以理解为对象自己“举手汇报”。'''

# 补充：socket + 非阻塞+ IO多路复用（IO操作对象都可以监测 + 文件）。